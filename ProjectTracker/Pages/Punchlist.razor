@page "/punchlist"

<div class="d-flex justify-content-between mb-4">
    <h3>Punchlist</h3>
    <ProjectTracker.Components.Charts.BarChart Data="_entriesSummary" MaxValue="GetMaxValue()" />
</div>
<div class="d-grid gap-4 align-items-start">
    @if(_entries is null){
        <h3>Loading...</h3>
    }
    else {
        foreach (var entry in _entries)
        {
            <ProjectTracker.Components.PunchlistCard Entry="@entry" />
        }
    }
    <button class="btn btn-secondary" @onclick="AddEntry">Add Punchlist Item</button>
</div>

@code {
    List<PunchlistEntry>? _entries;

    Dictionary<string, int>? _entriesSummary => _entries?
        .Where(x => x.Id != 0)
        .GroupBy(x => x.StatusId)
        .ToDictionary(x => x.Key.ToString(), x => x.Count());

    int GetMaxValue(){
        if ((_entriesSummary?.Count ?? 0) == 0)
            return 0;
        return _entriesSummary?.Max(x => x.Value) ?? 0;
    }

    protected override void OnInitialized()
    {
        var entries = new List<PunchlistEntry>();

        for(int i = 1; i < 20; i++){
            var entry = new PunchlistEntry()
                {
                    Name = $"Entry {i}",
                    Description = "This is the description of the issue.  It needs to be fixed and this is vague",
                    Id = i,
                    Resolution = i % 3 == 0 ? "This is the resolution of this object and it has one" : string.Empty,
                    PriorityId = Random.Shared.Next(0, 4),
                    StatusId = Random.Shared.Next(0, 3),
                    Created = DateTime.Today.AddDays(-1 * Random.Shared.Next(0, 200)),
                };
        }

        _entries = entries;
    }

    void AddEntry()
    {
        if (_entries is null) return;
        _entries.Add(new PunchlistEntry());
    }
}
