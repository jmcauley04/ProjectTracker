@inject IConfiguration Config
@inject FileService FileService

<div>
    <hr class="my-2" />
    <div class="d-flex gap-4 flex-wrap justify-content-center">
        <textarea class="flex-grow-1 p-2" rows="10" @onchange="OnTextChanged" disabled="@Disabled">
            @Text
        </textarea>
        <div class="d-grid gap-1">
            @if(Image is null)
            {
                <div class="no-image">No Image</div>
                <InputFile OnChange="AddImage" accept="image/png, image/jpeg, image/gif" disabled="@Disabled" />
            }
            else
            {
                <img src="/ImageStore/@Image" alt="image of issue" />
                <button class="btn btn-secondary" @onclick="RemoveImage" disabled="@Disabled">Remove Image</button>
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public bool Disabled { get; set; }

    [Parameter]
    public string Text { get; set; } = string.Empty;

    [Parameter]
    public EventCallback<string> TextChanged { get; set; }

    [Parameter]
    public string? Image { get; set; }

    [Parameter]
    public EventCallback<string?> ImageChanged { get; set; }

    async Task OnTextChanged(ChangeEventArgs args){
        var text = args.Value?.ToString() ?? string.Empty;
        if (TextChanged.HasDelegate)
            await TextChanged.InvokeAsync(text);
        else Text = text;
    }

    async Task RemoveImage()
    {
        await ImageChanged.InvokeAsync(null);
        Image = null;
    }

    async Task AddImage(InputFileChangeEventArgs args)
    {
        var fileName = await FileService.SaveImage(args.File);
        await ImageChanged.InvokeAsync(fileName);
    }
}
